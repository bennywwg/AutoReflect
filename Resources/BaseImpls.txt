void SerdeData::BeginObject(char const* Name) {
    nlohmann::json& Scope = AtChecked(Name);
    Scopes.push_back(&Scope);
    ScopeNames.push_back(Name);
}

void SerdeData::EndObject() {
    Scopes.pop_back();
    ScopeNames.pop_back();
}

nlohmann::json& SerdeData::GetCurrentScope() {
    return Scopes.empty() ? Data : *Scopes.back();
}

nlohmann::json& Serializer::AtChecked(char const* Name) {
    if (GetCurrentScope().find(Name) != GetCurrentScope().end()) throw std::runtime_error("Name " + std::string(Name) + " already in use");
    return GetCurrentScope()[Name];
}

nlohmann::json& Deserializer::AtChecked(char const* Name) {
    if (GetCurrentScope().find(Name) == GetCurrentScope().end()) {
        std::string Er = ScopeNames.empty() ? "" : ScopeNames[0];
        for (std::string const& ScopeName : ScopeNames) {
            Er += "::" + ScopeName;
        }
        throw std::runtime_error("Name " + std::string(Name) + " can't be found" + (Er.empty() ? std::string() : " in " + Er));
    }
    return GetCurrentScope()[Name];
}

void Serialize(Serializer& Ser, char const* Name, bool const& Value) { Ser.AtChecked(Name) = Value; }
void Serialize(Serializer& Ser, char const* Name, uint8_t const& Value) { Ser.AtChecked(Name) = Value; }
void Serialize(Serializer& Ser, char const* Name, uint16_t const& Value) { Ser.AtChecked(Name) = Value; }
void Serialize(Serializer& Ser, char const* Name, uint32_t const& Value) { Ser.AtChecked(Name) = Value; }
void Serialize(Serializer& Ser, char const* Name, uint64_t const& Value) { Ser.AtChecked(Name) = Value; }
void Serialize(Serializer& Ser, char const* Name, int8_t const& Value) { Ser.AtChecked(Name) = Value; }
void Serialize(Serializer& Ser, char const* Name, int16_t const& Value) { Ser.AtChecked(Name) = Value; }
void Serialize(Serializer& Ser, char const* Name, int32_t const& Value) { Ser.AtChecked(Name) = Value; }
void Serialize(Serializer& Ser, char const* Name, int64_t const& Value) { Ser.AtChecked(Name) = Value; }
void Serialize(Serializer& Ser, char const* Name, std::string const& Value) { Ser.AtChecked(Name) = Value; }
void Serialize(Serializer& Ser, char const* Name, float const& Value) { Ser.AtChecked(Name) = Value; }
void Serialize(Serializer& Ser, char const* Name, double const& Value) { Ser.AtChecked(Name) = Value; }

void Deserialize(Deserializer& Ser, char const* Name, bool& Value) { Value = Ser.AtChecked(Name); }
void Deserialize(Deserializer& Ser, char const* Name, uint8_t& Value) { Value = Ser.AtChecked(Name); }
void Deserialize(Deserializer& Ser, char const* Name, uint16_t& Value) { Value = Ser.AtChecked(Name); }
void Deserialize(Deserializer& Ser, char const* Name, uint32_t& Value) { Value = Ser.AtChecked(Name); }
void Deserialize(Deserializer& Ser, char const* Name, uint64_t& Value) { Value = Ser.AtChecked(Name); }
void Deserialize(Deserializer& Ser, char const* Name, int8_t& Value) { Value = Ser.AtChecked(Name); }
void Deserialize(Deserializer& Ser, char const* Name, int16_t& Value) { Value = Ser.AtChecked(Name); }
void Deserialize(Deserializer& Ser, char const* Name, int32_t& Value) { Value = Ser.AtChecked(Name); }
void Deserialize(Deserializer& Ser, char const* Name, int64_t& Value) { Value = Ser.AtChecked(Name); }
void Deserialize(Deserializer& Ser, char const* Name, std::string& Value) { Value = Ser.AtChecked(Name); }
void Deserialize(Deserializer& Ser, char const* Name, float& Value) { Value = Ser.AtChecked(Name); }
void Deserialize(Deserializer& Ser, char const* Name, double& Value) { Value = Ser.AtChecked(Name); }

void SerializeFields(Serializer& Ser, bool const& Value) { Ser.GetCurrentScope() = Value; }
void SerializeFields(Serializer& Ser, uint8_t const& Value) { Ser.GetCurrentScope() = Value; }
void SerializeFields(Serializer& Ser, uint16_t const& Value) { Ser.GetCurrentScope() = Value; }
void SerializeFields(Serializer& Ser, uint32_t const& Value) { Ser.GetCurrentScope() = Value; }
void SerializeFields(Serializer& Ser, uint64_t const& Value) { Ser.GetCurrentScope() = Value; }
void SerializeFields(Serializer& Ser, int8_t const& Value) { Ser.GetCurrentScope() = Value; }
void SerializeFields(Serializer& Ser, int16_t const& Value) { Ser.GetCurrentScope() = Value; }
void SerializeFields(Serializer& Ser, int32_t const& Value) { Ser.GetCurrentScope() = Value; }
void SerializeFields(Serializer& Ser, int64_t const& Value) { Ser.GetCurrentScope() = Value; }
void SerializeFields(Serializer& Ser, std::string const& Value) { Ser.GetCurrentScope() = Value; }
void SerializeFields(Serializer& Ser, float const& Value) { Ser.GetCurrentScope() = Value; }
void SerializeFields(Serializer& Ser, double const& Value) { Ser.GetCurrentScope() = Value; }

void DeserializeFields(Deserializer& Ser, bool& Value) { Value = Ser.GetCurrentScope(); }
void DeserializeFields(Deserializer& Ser, uint8_t& Value) { Value = Ser.GetCurrentScope(); }
void DeserializeFields(Deserializer& Ser, uint16_t& Value) { Value = Ser.GetCurrentScope(); }
void DeserializeFields(Deserializer& Ser, uint32_t& Value) { Value = Ser.GetCurrentScope(); }
void DeserializeFields(Deserializer& Ser, uint64_t& Value) { Value = Ser.GetCurrentScope(); }
void DeserializeFields(Deserializer& Ser, int8_t& Value) { Value = Ser.GetCurrentScope(); }
void DeserializeFields(Deserializer& Ser, int16_t& Value) { Value = Ser.GetCurrentScope(); }
void DeserializeFields(Deserializer& Ser, int32_t& Value) { Value = Ser.GetCurrentScope(); }
void DeserializeFields(Deserializer& Ser, int64_t& Value) { Value = Ser.GetCurrentScope(); }
void DeserializeFields(Deserializer& Ser, std::string& Value) { Value = Ser.GetCurrentScope(); }
void DeserializeFields(Deserializer& Ser, float& Value) { Value = Ser.GetCurrentScope(); }
void DeserializeFields(Deserializer& Ser, double& Value) { Value = Ser.GetCurrentScope(); }

void Serialize(Serializer& Ser, char const* Name, glm::vec2 const& Value) { Ser.AtChecked(Name) = nlohmann::json::array({ Value.x, Value.y }); }
void Serialize(Serializer& Ser, char const* Name, glm::vec3 const& Value) { Ser.AtChecked(Name) = nlohmann::json::array({ Value.x, Value.y, Value.z }); }
void Serialize(Serializer& Ser, char const* Name, glm::vec4 const& Value) { Ser.AtChecked(Name) = nlohmann::json::array({ Value.x, Value.y, Value.z, Value.w }); }
void Serialize(Serializer& Ser, char const* Name, glm::ivec2 const& Value) { Ser.AtChecked(Name) = nlohmann::json::array({ Value.x, Value.y }); }
void Serialize(Serializer& Ser, char const* Name, glm::ivec3 const& Value) { Ser.AtChecked(Name) = nlohmann::json::array({ Value.x, Value.y, Value.z }); }
void Serialize(Serializer& Ser, char const* Name, glm::ivec4 const& Value) { Ser.AtChecked(Name) = nlohmann::json::array({ Value.x, Value.y, Value.z, Value.w }); }
void Serialize(Serializer& Ser, char const* Name, glm::uvec2 const& Value) { Ser.AtChecked(Name) = nlohmann::json::array({ Value.x, Value.y }); }
void Serialize(Serializer& Ser, char const* Name, glm::uvec3 const& Value) { Ser.AtChecked(Name) = nlohmann::json::array({ Value.x, Value.y, Value.z }); }
void Serialize(Serializer& Ser, char const* Name, glm::uvec4 const& Value) { Ser.AtChecked(Name) = nlohmann::json::array({ Value.x, Value.y, Value.z, Value.w }); }

void Deserialize(Deserializer& Ser, char const* Name, glm::vec2& Value)
{ auto const& Array = Ser.AtChecked(Name); Value = glm::vec2(Array[0], Array[1]); }
void Deserialize(Deserializer& Ser, char const* Name, glm::vec3& Value)
{ auto const& Array = Ser.AtChecked(Name); Value = glm::vec3(Array[0], Array[1], Array[2]); }
void Deserialize(Deserializer& Ser, char const* Name, glm::vec4& Value)
{ auto const& Array = Ser.AtChecked(Name); Value = glm::vec4(Array[0], Array[1], Array[2], Array[3]); }
void Deserialize(Deserializer& Ser, char const* Name, glm::ivec2& Value)
{ auto const& Array = Ser.AtChecked(Name); Value = glm::ivec2(Array[0], Array[1]); }
void Deserialize(Deserializer& Ser, char const* Name, glm::ivec3& Value)
{ auto const& Array = Ser.AtChecked(Name); Value = glm::ivec3(Array[0], Array[1], Array[2]); }
void Deserialize(Deserializer& Ser, char const* Name, glm::ivec4& Value)
{ auto const& Array = Ser.AtChecked(Name); Value = glm::ivec4(Array[0], Array[1], Array[2], Array[3]); }
void Deserialize(Deserializer& Ser, char const* Name, glm::uvec2& Value)
{ auto const& Array = Ser.AtChecked(Name); Value = glm::uvec2(Array[0], Array[1]); }
void Deserialize(Deserializer& Ser, char const* Name, glm::uvec3& Value)
{ auto const& Array = Ser.AtChecked(Name); Value = glm::uvec3(Array[0], Array[1], Array[2]); }
void Deserialize(Deserializer& Ser, char const* Name, glm::uvec4& Value)
{ auto const& Array = Ser.AtChecked(Name); Value = glm::uvec4(Array[0], Array[1], Array[2], Array[3]); }

void SerializeFields(Serializer& Ser, glm::vec2 const& Value) { Ser.GetCurrentScope() = nlohmann::json::array({ Value.x, Value.y }); }
void SerializeFields(Serializer& Ser, glm::vec3 const& Value) { Ser.GetCurrentScope() = nlohmann::json::array({ Value.x, Value.y, Value.z }); }
void SerializeFields(Serializer& Ser, glm::vec4 const& Value) { Ser.GetCurrentScope() = nlohmann::json::array({ Value.x, Value.y, Value.z, Value.w }); }
void SerializeFields(Serializer& Ser, glm::ivec2 const& Value) { Ser.GetCurrentScope() = nlohmann::json::array({ Value.x, Value.y }); }
void SerializeFields(Serializer& Ser, glm::ivec3 const& Value) { Ser.GetCurrentScope() = nlohmann::json::array({ Value.x, Value.y, Value.z }); }
void SerializeFields(Serializer& Ser, glm::ivec4 const& Value) { Ser.GetCurrentScope() = nlohmann::json::array({ Value.x, Value.y, Value.z, Value.w }); }
void SerializeFields(Serializer& Ser, glm::uvec2 const& Value) { Ser.GetCurrentScope() = nlohmann::json::array({ Value.x, Value.y }); }
void SerializeFields(Serializer& Ser, glm::uvec3 const& Value) { Ser.GetCurrentScope() = nlohmann::json::array({ Value.x, Value.y, Value.z }); }
void SerializeFields(Serializer& Ser, glm::uvec4 const& Value) { Ser.GetCurrentScope() = nlohmann::json::array({ Value.x, Value.y, Value.z, Value.w }); }

void DeserializeFields(Deserializer& Ser, glm::vec2& Value)
{ auto const& Array = Ser.GetCurrentScope(); Value = glm::vec2(Array[0], Array[1]); }
void DeserializeFields(Deserializer& Ser, glm::vec3& Value)
{ auto const& Array = Ser.GetCurrentScope(); Value = glm::vec3(Array[0], Array[1], Array[2]); }
void DeserializeFields(Deserializer& Ser, glm::vec4& Value)
{ auto const& Array = Ser.GetCurrentScope(); Value = glm::vec4(Array[0], Array[1], Array[2], Array[3]); }
void DeserializeFields(Deserializer& Ser, glm::ivec2& Value)
{ auto const& Array = Ser.GetCurrentScope(); Value = glm::ivec2(Array[0], Array[1]); }
void DeserializeFields(Deserializer& Ser, glm::ivec3& Value)
{ auto const& Array = Ser.GetCurrentScope(); Value = glm::ivec3(Array[0], Array[1], Array[2]); }
void DeserializeFields(Deserializer& Ser, glm::ivec4& Value)
{ auto const& Array = Ser.GetCurrentScope(); Value = glm::ivec4(Array[0], Array[1], Array[2], Array[3]); }
void DeserializeFields(Deserializer& Ser, glm::uvec2& Value)
{ auto const& Array = Ser.GetCurrentScope(); Value = glm::uvec2(Array[0], Array[1]); }
void DeserializeFields(Deserializer& Ser, glm::uvec3& Value)
{ auto const& Array = Ser.GetCurrentScope(); Value = glm::uvec3(Array[0], Array[1], Array[2]); }
void DeserializeFields(Deserializer& Ser, glm::uvec4& Value)
{ auto const& Array = Ser.GetCurrentScope(); Value = glm::uvec4(Array[0], Array[1], Array[2], Array[3]); }