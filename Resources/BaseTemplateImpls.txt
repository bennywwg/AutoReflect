#ifndef BASE_TEMPLATE_IMPLS
#define BASE_TEMPLATE_IMPLS

template<typename T>
requires (std::is_same_v<T, uint8_t>)
inline void SerializeFields(Serializer& Ser, std::vector<T> const& Value) {
    auto& Scope = Ser.GetCurrentScope();
    Scope["Begin"] = Ser.Binary.size();
    Scope["Size"] = Value.size();

    Ser.Binary.resize(Ser.Binary.size() + Value.size());
    memcpy(Ser.Binary.data() + (Ser.Binary.size() - Value.size()), Value.data(), Value.size());
}

template<typename T>
requires (!std::is_same_v<T, uint8_t>)
inline void SerializeFields(Serializer& Ser, std::vector<T> const& Value) {
    auto& Scope = Ser.GetCurrentScope();
    Scope = nlohmann::json::array();

    for (auto const& Item : Value) {
        Scope.push_back(nlohmann::json());
        Ser.Scopes.push_back(&Scope.back());
        SerializeFields(Ser, Item);
        Ser.Scopes.pop_back();
    }
}

template<typename T>
inline void Serialize(Serializer& Ser, char const* Name, std::vector<T> const& Value) {
    Ser.BeginObject(Name);
    SerializeFields(Ser, Value);
    Ser.EndObject();
}

template<typename T>
requires (std::is_same_v<T, uint8_t>)
inline void DeserializeFields(Deserializer& Ser, std::vector<T>& Value) {
    auto& Scope = Ser.GetCurrentScope();

    Value.resize(Scope["Size"].get<size_t>());

    memcpy(Value.data(), Ser.Binary.data() + Scope["Begin"].get<size_t>(), Value.size());
}

template<typename T>
requires (!std::is_same_v<T, uint8_t>)
inline void DeserializeFields(Deserializer& Ser, std::vector<T>& Value) {
    auto& Scope = Ser.GetCurrentScope();

    for (auto& Item : Scope) {
        Value.push_back(T());
        Ser.Scopes.push_back(&Item);
        DeserializeFields(Ser, Value.back());
        Ser.Scopes.pop_back();
    }
}

template<typename T>
inline void Deserialize(Deserializer& Ser, char const* Name, std::vector<T>& Value) {
    Ser.BeginObject(Name);
    DeserializeFields(Ser, Value);
    Ser.EndObject();
}

template<typename T>
inline void SerializeFields(Serializer& Ser, std::optional<T> const& Value) {
    if (Value.has_value()) {
        SerializeFields(Ser, Value.value());
    } else {
        Ser.GetCurrentScope() = nullptr;
    }
}

template<typename T>
inline void Serialize(Serializer& Ser, char const* Name, std::optional<T> const& Value) {
    Ser.BeginObject(Name);
    SerializeFields(Ser, Value);
    Ser.EndObject();
}

template<typename T>
inline void DeserializeFields(Deserializer& Ser, std::optional<T>& Value) {
    auto& Scope = Ser.GetCurrentScope();

    if (Scope.is_null()) {
        Value = std::nullopt;
    } else {
        Value = T();
        DeserializeFields(Ser, Value.value());
    }
}

template<typename T>
inline void Deserialize(Deserializer& Ser, char const* Name, std::optional<T>& Value) {
    Ser.BeginObject(Name);
    DeserializeFields(Ser, Value);
    Ser.EndObject();
}

#endif // BASE_TEMPLATE_IMPLS